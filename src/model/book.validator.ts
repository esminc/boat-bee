// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './book';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Book": {
            "type": "object",
            "properties": {
                "isbn": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "isbn",
                "title",
                "author",
                "url",
                "imageUrl",
                "description",
                "updatedAt"
            ],
            "additionalProperties": false,
            "description": "æœ¬"
        },
        "RecommendBook": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "interested": {
                    "type": "boolean"
                },
                "mlModel": {
                    "type": "string"
                },
                "isbn": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "author",
                "description",
                "imageUrl",
                "interested",
                "isbn",
                "mlModel",
                "title",
                "updatedAt",
                "url"
            ]
        },
        "SearchedBook": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "isbn": {
                    "type": "string"
                },
                "mlModel": {
                    "type": "string"
                },
                "interested": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "userId",
                "isbn",
                "mlModel",
                "interested"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateBook(payload: unknown): apiTypes.Book {
  /** Schema is defined in {@link SCHEMA.definitions.Book } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/Book");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid Book: ' + ajv.errorsText(validator.errors, {dataVar: "Book"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isBook(payload: unknown): payload is apiTypes.Book {
  try {
    validateBook(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateRecommendBook(payload: unknown): apiTypes.RecommendBook {
  /** Schema is defined in {@link SCHEMA.definitions.RecommendBook } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/RecommendBook");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid RecommendBook: ' + ajv.errorsText(validator.errors, {dataVar: "RecommendBook"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isRecommendBook(payload: unknown): payload is apiTypes.RecommendBook {
  try {
    validateRecommendBook(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateSearchedBook(payload: unknown): apiTypes.SearchedBook {
  /** Schema is defined in {@link SCHEMA.definitions.SearchedBook } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/SearchedBook");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid SearchedBook: ' + ajv.errorsText(validator.errors, {dataVar: "SearchedBook"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isSearchedBook(payload: unknown): payload is apiTypes.SearchedBook {
  try {
    validateSearchedBook(payload);
    return true;
  } catch (error) {
    return false;
  }
}
