// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './user';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/User",
    "definitions": {
        "User": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "department": {
                    "type": "string"
                },
                "job_type": {
                    "type": "string"
                },
                "age_range": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "post_review_count": {
                    "type": "number"
                }
            },
            "required": [
                "user_id",
                "user_name",
                "department",
                "job_type",
                "age_range",
                "post_review_count"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateUser(payload: unknown): apiTypes.User {
  /** Schema is defined in {@link SCHEMA.definitions.User } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/User");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid User: ' + ajv.errorsText(validator.errors, {dataVar: "User"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isUser(payload: unknown): payload is apiTypes.User {
  try {
    validateUser(payload);
    return true;
  } catch (error) {
    return false;
  }
}
